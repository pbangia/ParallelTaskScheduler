package app;

import app.exceptions.AppException;
import app.graphvisualization.MainGUI;
import app.io.DigraphFileReader;
import app.io.DigraphFileWriter;
import app.io.OutputGenerator;
import app.schedule.CommonScheduler;
import app.schedule.CommonSchedulerFactory;
import app.schedule.datatypes.Node;
import app.schedule.datatypes.PartialSolution;
import app.transform.DataTransformer;
import app.transform.TransformModuleFactory;
import app.utils.Stopwatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.util.Map;

public class BranchAndBoundApp {

    private static Logger logger = LoggerFactory.getLogger(BranchAndBoundApp.class);

    // Input parameters
    private File inputFile;
    private String outputFilename;
    private int numThreads;
    private int numProcessors;
    private boolean graphRequired;

    // Implemented modules
    private DigraphFileReader digraphFileReader;
    private DigraphFileWriter digraphFileWriter;
    private DataTransformer dataTransformer;
    private CommonScheduler taskScheduler;
    private OutputGenerator outputGenerator;


    public BranchAndBoundApp(File inputFile, String outputFilename, int numProcessors,
                             int numThreads, boolean graphRequired) {
        this.inputFile = inputFile;
        this.outputFilename = outputFilename;
        this.numProcessors = numProcessors;
        this.numThreads = numThreads;
        this.graphRequired = graphRequired;
    }

    /**
     * Starting point for the branch and bound application.
     */
    public void start() throws AppException, IOException, InterruptedException {
        loadModules();
        Map<String, Node> dataMap = readInput();
        setupGUI(dataMap);
        PartialSolution bestSolution = run(dataMap);
        writeOutput(bestSolution);
        //JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), "Eggs are not supposed to be green.");
    }

    private void setupGUI(Map<String, Node> dataMap) {
        if (graphRequired){
            MainGUI.get().setVisible(true);
            MainGUI.get().setGraphPanel(numThreads, dataMap);
            MainGUI.get().setUpThreadTableModel(dataMap);
            MainGUI.get().setStatisticsInfo(inputFile.getName(), dataMap.size(), dataTransformer.getDependencies().size(), numProcessors);
        }
    }

    /**
     * Loads any modules required to run the application.
     */
    private void loadModules() {
        this.digraphFileReader = new DigraphFileReader(inputFile);
        this.dataTransformer = TransformModuleFactory.createTransformer();
        this.outputGenerator = new OutputGenerator(outputFilename);
        this.digraphFileWriter = new DigraphFileWriter(outputFilename);
        logger.info("Loaded all modules required for application.");
    }

    /**
     * Reads the input file and transforms that data.
     *
     * @return The transformed datatypes in a Map representation
     * @throws AppException
     * @throws IOException
     */
    private Map<String, Node> readInput() throws AppException, IOException {
        String fileContents = digraphFileReader.readDigraphFile();
        Map<String, Node> dataMap = dataTransformer.transformIntoMap(fileContents);
        logger.info("Initialised all required components for application.");
        return dataMap;
    }

    /**
     * Runs the scheduler algorithm on the provided input data.
     *
     * @param dataMap The transformed datatypes provided from the input file of the program.
     * @return The best scheduled solution generated by the algorithm.
     */
    private PartialSolution run(Map<String, Node> dataMap) throws AppException, InterruptedException {
        logger.info("Starting branch and bound algorithm to find optimal schedule.");
        taskScheduler = CommonSchedulerFactory.createTaskScheduler(dataMap, numProcessors, numThreads, graphRequired);
        Stopwatch stopwatch = new Stopwatch();
        stopwatch.start();
        PartialSolution bestSolution = taskScheduler.scheduleTasks();
        stopwatch.stop();
        logger.info("Algorithm completed in " + stopwatch.getTimeString() + ".");
        return bestSolution;
    }

    private void writeOutput(PartialSolution bestSolution) {
        String output = outputGenerator.generateOutput(bestSolution, dataTransformer.getDependencies());
        digraphFileWriter.writeDigraphFile(output);
    }

}
